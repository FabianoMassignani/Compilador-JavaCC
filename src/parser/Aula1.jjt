options
{
  static = true;
  DEBUG_PARSER = true;
}

PARSER_BEGIN(Aula1)
package parser;

import recovery.*;
import view.Janela;
import archives.CreateFile;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.io.FileWriter;
import java.io.FileWriter;
 
public class Aula1
{
  final static Janela janela = new Janela();
  static int linha;
  
  public static void main(String args []) throws ParseException
  {
    
	janela.setVisible(true);
	janela.botaoCompilador().addActionListener(new ActionListener() {	  
		public void actionPerformed(ActionEvent e) {
	   		janela.removerFormatacaoCor();
			janela.erros.clear();
			janela.setVazioConsole();
		 

			if((janela.getTextArquivo().getText().equals(janela.getCampoTexto())) != true)
        	{
          		janela.setControleArquivo(false);
        	}

        	if(janela.getControleArquivo() || janela.getTextArquivo().getText().equals(" ") )
        	{
        	  		
		 		inicia();
		 		
   			}
   			else
			{
				if(!janela.getTextArquivo().getText().equals("")) { 
          	  
          	    	if(janela.getFile() == null)
          	    	{
          	     		janela.salvarComo();
          	     		
						inicia();
          	    	}else
          	    	{
          	      		janela.salvar();
          	      		
						inicia();
          	   		}
          	  
          	}
		}

		janela.verificaSeCompilou();
		     
   	  }
	});
  }

 
static void inicia(){
  FileReader arql = null;
    
  try {
	arql = new FileReader(janela.getFile());
	
  } catch (FileNotFoundException e2) {

	e2.printStackTrace();
  }
  
  BufferedReader arq = new BufferedReader(arql);

  try {
	Aula1 parser = new Aula1(arq);

  }catch (Exception e1){ 

	Aula1.ReInit(arq);

  }catch (Error e1) { 

   	Aula1.ReInit(arq);
  }
   
  try {
    SimpleNode n = Aula1.Start();
    
   	n.dump("", janela);
	 
	}catch (Exception e1){
	
	}catch (Error e1) {
	}
}
 
  static public String im(int x)
  {
    int k;
	String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
	   {}
   return s;
  }
	
  static Token lastError = null;
  static boolean eof;   
	
  static void consumeUntil(RecoverySet g, ParseException e, String met)
  throws ParseEOFException, ParseException
  {
    eof=false;
	Token tok;

	janela.setConsole("Bloco: '" + met + "'");
	janela.setConsole("Conjunto de sincronização: " + g);
		
	if (g == null) throw e; 
	
	tok = getToken(1);
	
	while ( ! eof )	{ 
	  if ( g.contains(tok.kind)) {
	    janela.setConsole("Encontrado token de sincronização: '"  + im(tok.kind)+"'" );
	    break;
	  }
	  
	  janela.setConsole("Ignorando o token: " + im(tok.kind));
	  
	  getNextToken();        
      tok = getToken(1);
	  if (tok.kind == EOF && ! g.contains(EOF) )    
	      eof = true;
	}
	
    if ( tok != lastError)  {
      janela.MarcaLinhaErro(e.getMessage());   
	  janela.setConsole(e.getMessage());
	  lastError = tok;
	   
	}
	
	if ( eof )
	  throw new ParseEOFException("Encontrei EOF onde não deveria.");
  }
}

PARSER_END(Aula1)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

// + uma ou mais vezes
// * zero ou mais vezes
// ? zero ou uma vez

TOKEN :
{
  < INTEIRO : "Jedi" >
| < FLOAT : "Droid" >
| < STRING : "Sith" >
| < BOLLEAN : "Wookiee" >
| < TRUE : "LightSide" >
| < FALSE : "DarkSide" >
| < IF : "ForceAwakens" >
| < ELSE : "DarkSideRises" >
| < FOR : "MillenniumFalcon" >
| < WHILE : "Lightsaber" >
| < ABRE_CHAVE : "{" >
| < FECHA_CHAVE : "}" >
| < ABRE_PARENTESES : "(" >
| < FECHA_PARENTESES : ")" >
| < PONTO_VIRGULA : ";" >
| < IGUAL : "=" >
| < VIRGULA : "," >
| < PONTO : "." >
| < MENOS : "-" >
| < MAIS : "+" >
| < MAISMAIS : "++" >
| < MENOSMENOS : "--" >
| < MAISMENOS : "+-" >
| < MENOSMAIS : "-+" >
| < DIVISAO : "/" >
| < MULTIPLICACAO : "*" >
| < POTENCIA : "**" > 
| < OPERADOR_LOGICO : "&&" | "||" >
| < IGUALIGUAL:  "==" >
| < MAIOR:  	 ">"  >
| < MAIORIGUAL:  ">=" >
| < MENOR:  	 "<"  >
| < MENORIGUAL:  "<=" >
| < MENORMAIOR:  "<>" >
| < DIGITO: ["0"-"9"] >
| < CARACTERE: ["A"-"Z", "a"-"z"] >
}

SimpleNode Start() :
{}
{
  main()
  {
    return jjtThis;
  }
}

int main() :
{
   RecoverySet g = Follow.main;
}
{
  try
  {
    (comandos())+
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "main");
  }
  {
    return 0;
  }
}

void comandos():
{ RecoverySet g= Follow.comandos; }
{
    try {
      atribuicao() | condicional() | repeticao() 
    }
    catch(ParseException e)
    {
     consumeUntil(g,e,"comandos");
   }
}

void bloco():
{ RecoverySet g= Follow.bloco;  }
{
  try
  {
   abreChave() (comandos())* fechaChave()
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "bloco");
  }
}

void atribuicao() :
{ RecoverySet g= Follow.atribuicao; }
{
  try
  {
   tipoDado()
   variavel()
   ( virgula() variavel() )*
   igual()
   dado()
   pontoVirgula()
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "atribuicao");
  }
}

void condicional():
{ RecoverySet g= Follow.condicional; }
{
  try
  {
    
   ifBloco()
   abreParenteses()
   expressao()
   fechaParenteses()
   bloco()
   (elseBloco() bloco())?
   
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "condicional");
  }
}

void repeticao():
{ RecoverySet g= Follow.repeticao; }
{
  try
  {
   para() | enquanto()
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "repeticao");
  }
}


void tipoDado():
{ RecoverySet g= Follow.tipoDado; }
{
  try
  {
   inteiroTipo() | floatTipo() | stringTipo() | bolleanTipo()
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "tipoDado");
  }
}

void variavel():
{ RecoverySet g= Follow.variavel; }
{
  try
  {
   (caractere() | digito() |  ponto())+ 
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "variavel");
  }   
}

void dado():
{ RecoverySet g= Follow.dado; }
{
  try
  {
    string() | bool() | operacao()
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "dado");
  }	 
}

void operacao():
{ RecoverySet g= Follow.operacao; }
{
  try
  {
    
    (mais() | menos() )?
    termoOuFatorAritmetico()
    ((mais() | menos() | multiplicacao() | divisao() | potencia()) termoOuFatorAritmetico())*  

  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "operacao");
  }
 }

void termoOuFatorAritmetico():
{ RecoverySet g= Follow.termoOuFatorAritmetico; }
{
  try{
    
   (abreParenteses() operacao() fechaParenteses() ) | variavel()

  } catch (ParseException e)
  {
    consumeUntil(g, e, "termoOuFatorAritmetico");
  }
  
}

void string():
{ RecoverySet g= Follow.string; }
{
  try {
    
    "'"
    (
      caractere()
    | digito()
    | virgula()
    | operadorComparacao()
	| operadorLogico()
	| mais()
	| menos()
	| multiplicacao()
	| divisao()
	| potencia()
	| fechaParenteses()
	| abreParenteses()
	)*
   "'"
	
  } catch (ParseException e)
  {
    consumeUntil(g, e, "string");
  } 
}

void bool():
{ RecoverySet g= Follow.bool; }
{
  try{
    
    trueBloco() | falseBloco()
    
  }
  catch (ParseException e) {
    consumeUntil(g, e, "bool");
  }
}

void para():
{ RecoverySet g= Follow.para; }
{
  
  try {
  forBloco()
  abreParenteses()
  inteiroTipo()
  variavel()
  igual()
  variavel()
  pontoVirgula()
  expressao()
  pontoVirgula()
  variavel()
  ( maismais() | menosmenos() | maismenos() variavel() | menosmais() variavel())
  fechaParenteses()
  bloco()
  
  } catch (ParseException e)
  {
    consumeUntil(g, e, "para");
  }
}

void enquanto():
{ RecoverySet g= Follow.enquanto; }
{
  try {
    
  whileBloco()
  abreParenteses()
  expressao()
  fechaParenteses()
  bloco()

  } catch (ParseException e) {
    consumeUntil(g, e, "enquanto");
  }	 
}

void expressao():
{ RecoverySet g= Follow.expressao; }
{
  try
  {
  termoExpressao() ( operadorLogico() termoExpressao() )*   
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "expressao");
  }
}

void termoExpressao():
{ RecoverySet g= Follow.termoExpressao; }
{
  try
  {
    fatorExpressao() ( operadorComparacao() fatorExpressao() )*
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "termoExpressao");
  }
}

void fatorExpressao():
{ RecoverySet g= Follow.fatorExpressao; }
{
  try
  {
    bool() | comparacao() | variavel()
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "fatorExpressao");
  }
}

void comparacao():
{ RecoverySet g= Follow.comparacao; }
{
  try
  {
   abreParenteses() fatorExpressao() operadorComparacao() fatorExpressao() fechaParenteses()
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "comparacao");
  }
}

void operadorComparacao():
{ RecoverySet g= Follow.fatorExpressao; }
{
  try
  {
    igualIgual() | maior() | maiorIgual() | menor() | menorIgual()  | menorMaior()
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "fatorExpressao");
  }
}

void abreChave():
{
}
{
	< ABRE_CHAVE >
}

void fechaChave():
{
}
{
	< FECHA_CHAVE > 
}

void inteiroTipo():
{
}
{
	<INTEIRO>
}

void floatTipo():
{
}
{
	< FLOAT >
}

void stringTipo():
{
}
{
	 < STRING >   
}

void bolleanTipo():
{
}
{
	 < BOLLEAN >   
}

void caractere():
{
}
{
	 <CARACTERE>   
}

void digito():
{
}
{
	 < DIGITO >   
}

 void ponto():
{
}
{
	 < PONTO >   
}

void trueBloco():
{}
{
    <TRUE>
}

void falseBloco():
{}
{
    < FALSE >
}

void ifBloco():
{}
{
    < IF >
}

void elseBloco():
{}
{
    < ELSE >
}

void forBloco():
{}
{
    < FOR >
}


void pontoVirgula():
{}
{
    < PONTO_VIRGULA >
}

void virgula():
{
}
{
	< VIRGULA > 
}

void igual():
{
}
{
	< IGUAL > 
}

void abreParenteses():
{}
{
    <ABRE_PARENTESES>
}

void igualIgual():
{}
{
    < IGUALIGUAL >
}

void maior():
{}
{
    < MAIOR >
}

void maiorIgual():
{}
{
    < MAIORIGUAL >
}

void menor():
{}
{
    < MENOR >
}


void menorIgual():
{}
{
    < MENORIGUAL >
}


void menorMaior():
{}
{
    < MENORMAIOR >
}


void fechaParenteses():
{}
{
    <FECHA_PARENTESES>
}

void mais():
{}
{
    <MAIS>
}

void menos():
{}
{
    <MENOS>
}

void multiplicacao():
{}
{
    <MULTIPLICACAO>
}

void divisao():
{}
{
    <DIVISAO>
}

void potencia():
{}
{
    <POTENCIA>
}

void whileBloco():
{}
{
    < WHILE >
}

void operadorLogico():
{}
{
    < OPERADOR_LOGICO >
}

void maismais():
{
}
{
	< MAISMAIS >
}

void menosmenos():
{
}
{
	< MENOSMENOS >
}


void maismenos():
{
}
{
	< MAISMENOS >
}


void menosmais():
{
}
{
	< MENOSMAIS >
}
