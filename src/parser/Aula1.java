/* Aula1.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Aula1.java */
package parser;

import recovery.*;
import view.Janela;
import archives.CreateFile;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.io.FileWriter;
import java.io.FileWriter;

public class Aula1/*@bgen(jjtree)*/implements Aula1TreeConstants, Aula1Constants {/*@bgen(jjtree)*/
  protected static JJTAula1State jjtree = new JJTAula1State();final static Janela janela = new Janela();
  static int linha;

  public static void main(String args []) throws ParseException
  {

        janela.setVisible(true);
        janela.botaoCompilador().addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                        janela.removerFormatacaoCor();
                        janela.erros.clear();
                        janela.setVazioConsole();


                        if((janela.getTextArquivo().getText().equals(janela.getCampoTexto())) != true)
                {
                        janela.setControleArquivo(false);
                }

                if(janela.getControleArquivo() || janela.getTextArquivo().getText().equals(" ") )
                {

                                inicia();

                        }
                        else
                        {
                                if(!janela.getTextArquivo().getText().equals("")) {

                        if(janela.getFile() == null)
                        {
                                janela.salvarComo();

                                                inicia();
                        }else
                        {
                                janela.salvar();

                                                inicia();
                                }

                }
                }

                janela.verificaSeCompilou();

          }
        });
  }


static void inicia(){
  FileReader arql = null;

  try {
        arql = new FileReader(janela.getFile());

  } catch (FileNotFoundException e2) {

        e2.printStackTrace();
  }

  BufferedReader arq = new BufferedReader(arql);

  try {
        Aula1 parser = new Aula1(arq);

  }catch (Exception e1){

        Aula1.ReInit(arq);

  }catch (Error e1) {

        Aula1.ReInit(arq);
  }

  try {
    SimpleNode n = Aula1.Start();

        n.dump("", janela);

        }catch (Exception e1){

        }catch (Error e1) {
        }
}

  static public String im(int x)
  {
    int k;
        String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
           {}
   return s;
  }

  static Token lastError = null;
  static boolean eof;

  static void consumeUntil(RecoverySet g, ParseException e, String met)
  throws ParseEOFException, ParseException
  {
    eof=false;
        Token tok;

        janela.setConsole("Bloco: '" + met + "'");
        janela.setConsole("Conjunto de sincroniza\u00e7\u00e3o: " + g);

        if (g == null) throw e;

        tok = getToken(1);

        while ( ! eof ) {
          if ( g.contains(tok.kind)) {
            janela.setConsole("Encontrado token de sincroniza\u00e7\u00e3o: '"  + im(tok.kind)+"'" );
            break;
          }

          janela.setConsole("Ignorando o token: " + im(tok.kind));

          getNextToken();
      tok = getToken(1);
          if (tok.kind == EOF && ! g.contains(EOF) )
              eof = true;
        }

    if ( tok != lastError)  {
      janela.MarcaLinhaErro(e.getMessage());
          janela.setConsole(e.getMessage());
          lastError = tok;

        }

        if ( eof )
          throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }

  static final public SimpleNode Start() throws ParseException {
    trace_call("Start");
    try {
/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        main();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Start");
    }
}

  static final public int main() throws ParseException {
    trace_call("main");
    try {
/*@bgen(jjtree) main */
   SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.main;
      try {
        try {
          label_1:
          while (true) {
            comandos();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INTEIRO:
            case FLOAT:
            case STRING:
            case BOLLEAN:
            case IF:
            case FOR:
            case WHILE:{
              ;
              break;
              }
            default:
              jj_la1[0] = jj_gen;
              break label_1;
            }
          }
        } catch (ParseException e) {
consumeUntil(g, e, "main");
        }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return 0;}
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("main");
    }
}

  static final public void comandos() throws ParseException {
    trace_call("comandos");
    try {
/*@bgen(jjtree) comandos */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMANDOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.comandos;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEIRO:
          case FLOAT:
          case STRING:
          case BOLLEAN:{
            atribuicao();
            break;
            }
          case IF:{
            condicional();
            break;
            }
          case FOR:
          case WHILE:{
            repeticao();
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
consumeUntil(g,e,"comandos");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("comandos");
    }
}

  static final public void bloco() throws ParseException {
    trace_call("bloco");
    try {
/*@bgen(jjtree) bloco */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.bloco;
      try {
        try {
          abreChave();
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INTEIRO:
            case FLOAT:
            case STRING:
            case BOLLEAN:
            case IF:
            case FOR:
            case WHILE:{
              ;
              break;
              }
            default:
              jj_la1[2] = jj_gen;
              break label_2;
            }
            comandos();
          }
          fechaChave();
        } catch (ParseException e) {
consumeUntil(g, e, "bloco");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("bloco");
    }
}

  static final public void atribuicao() throws ParseException {
    trace_call("atribuicao");
    try {
/*@bgen(jjtree) atribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.atribuicao;
      try {
        try {
          tipoDado();
          variavel();
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case VIRGULA:{
              ;
              break;
              }
            default:
              jj_la1[3] = jj_gen;
              break label_3;
            }
            virgula();
            variavel();
          }
          igual();
          dado();
          pontoVirgula();
        } catch (ParseException e) {
consumeUntil(g, e, "atribuicao");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("atribuicao");
    }
}

  static final public void condicional() throws ParseException {
    trace_call("condicional");
    try {
/*@bgen(jjtree) condicional */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.condicional;
      try {
        try {
          ifBloco();
          abreParenteses();
          expressao();
          fechaParenteses();
          bloco();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ELSE:{
            elseBloco();
            bloco();
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            ;
          }
        } catch (ParseException e) {
consumeUntil(g, e, "condicional");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("condicional");
    }
}

  static final public void repeticao() throws ParseException {
    trace_call("repeticao");
    try {
/*@bgen(jjtree) repeticao */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.repeticao;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FOR:{
            para();
            break;
            }
          case WHILE:{
            enquanto();
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
consumeUntil(g, e, "repeticao");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("repeticao");
    }
}

  static final public void tipoDado() throws ParseException {
    trace_call("tipoDado");
    try {
/*@bgen(jjtree) tipoDado */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.tipoDado;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEIRO:{
            inteiroTipo();
            break;
            }
          case FLOAT:{
            floatTipo();
            break;
            }
          case STRING:{
            stringTipo();
            break;
            }
          case BOLLEAN:{
            bolleanTipo();
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
consumeUntil(g, e, "tipoDado");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("tipoDado");
    }
}

  static final public void variavel() throws ParseException {
    trace_call("variavel");
    try {
/*@bgen(jjtree) variavel */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIAVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.variavel;
      try {
        try {
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case CARACTERE:{
              caractere();
              break;
              }
            case DIGITO:{
              digito();
              break;
              }
            case PONTO:{
              ponto();
              break;
              }
            default:
              jj_la1[7] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case PONTO:
            case DIGITO:
            case CARACTERE:{
              ;
              break;
              }
            default:
              jj_la1[8] = jj_gen;
              break label_4;
            }
          }
        } catch (ParseException e) {
consumeUntil(g, e, "variavel");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("variavel");
    }
}

  static final public void dado() throws ParseException {
    trace_call("dado");
    try {
/*@bgen(jjtree) dado */
  SimpleNode jjtn000 = new SimpleNode(JJTDADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.dado;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 41:{
            string();
            break;
            }
          case TRUE:
          case FALSE:{
            bool();
            break;
            }
          case ABRE_PARENTESES:
          case PONTO:
          case MENOS:
          case MAIS:
          case DIGITO:
          case CARACTERE:{
            operacao();
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
consumeUntil(g, e, "dado");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("dado");
    }
}

  static final public void operacao() throws ParseException {
    trace_call("operacao");
    try {
/*@bgen(jjtree) operacao */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.operacao;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MENOS:
          case MAIS:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case MAIS:{
              mais();
              break;
              }
            case MENOS:{
              menos();
              break;
              }
            default:
              jj_la1[10] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            ;
          }
          termoOuFatorAritmetico();
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case MENOS:
            case MAIS:
            case DIVISAO:
            case MULTIPLICACAO:
            case POTENCIA:{
              ;
              break;
              }
            default:
              jj_la1[12] = jj_gen;
              break label_5;
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case MAIS:{
              mais();
              break;
              }
            case MENOS:{
              menos();
              break;
              }
            case MULTIPLICACAO:{
              multiplicacao();
              break;
              }
            case DIVISAO:{
              divisao();
              break;
              }
            case POTENCIA:{
              potencia();
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            termoOuFatorAritmetico();
          }
        } catch (ParseException e) {
consumeUntil(g, e, "operacao");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("operacao");
    }
}

  static final public void termoOuFatorAritmetico() throws ParseException {
    trace_call("termoOuFatorAritmetico");
    try {
/*@bgen(jjtree) termoOuFatorAritmetico */
  SimpleNode jjtn000 = new SimpleNode(JJTTERMOOUFATORARITMETICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.termoOuFatorAritmetico;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ABRE_PARENTESES:{
            abreParenteses();
            operacao();
            fechaParenteses();
            break;
            }
          case PONTO:
          case DIGITO:
          case CARACTERE:{
            variavel();
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
consumeUntil(g, e, "termoOuFatorAritmetico");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("termoOuFatorAritmetico");
    }
}

  static final public void string() throws ParseException {
    trace_call("string");
    try {
/*@bgen(jjtree) string */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.string;
      try {
        try {
          jj_consume_token(41);
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ABRE_PARENTESES:
            case FECHA_PARENTESES:
            case VIRGULA:
            case MENOS:
            case MAIS:
            case DIVISAO:
            case MULTIPLICACAO:
            case POTENCIA:
            case OPERADOR_LOGICO:
            case IGUALIGUAL:
            case MAIOR:
            case MAIORIGUAL:
            case MENOR:
            case MENORIGUAL:
            case MENORMAIOR:
            case DIGITO:
            case CARACTERE:{
              ;
              break;
              }
            default:
              jj_la1[15] = jj_gen;
              break label_6;
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case CARACTERE:{
              caractere();
              break;
              }
            case DIGITO:{
              digito();
              break;
              }
            case VIRGULA:{
              virgula();
              break;
              }
            case IGUALIGUAL:
            case MAIOR:
            case MAIORIGUAL:
            case MENOR:
            case MENORIGUAL:
            case MENORMAIOR:{
              operadorComparacao();
              break;
              }
            case OPERADOR_LOGICO:{
              operadorLogico();
              break;
              }
            case MAIS:{
              mais();
              break;
              }
            case MENOS:{
              menos();
              break;
              }
            case MULTIPLICACAO:{
              multiplicacao();
              break;
              }
            case DIVISAO:{
              divisao();
              break;
              }
            case POTENCIA:{
              potencia();
              break;
              }
            case FECHA_PARENTESES:{
              fechaParenteses();
              break;
              }
            case ABRE_PARENTESES:{
              abreParenteses();
              break;
              }
            default:
              jj_la1[16] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(41);
        } catch (ParseException e) {
consumeUntil(g, e, "string");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("string");
    }
}

  static final public void bool() throws ParseException {
    trace_call("bool");
    try {
/*@bgen(jjtree) bool */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.bool;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:{
            trueBloco();
            break;
            }
          case FALSE:{
            falseBloco();
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
consumeUntil(g, e, "bool");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("bool");
    }
}

  static final public void para() throws ParseException {
    trace_call("para");
    try {
/*@bgen(jjtree) para */
  SimpleNode jjtn000 = new SimpleNode(JJTPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.para;
      try {
        try {
          forBloco();
          abreParenteses();
          inteiroTipo();
          variavel();
          igual();
          variavel();
          pontoVirgula();
          expressao();
          pontoVirgula();
          variavel();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MAISMAIS:{
            maismais();
            break;
            }
          case MENOSMENOS:{
            menosmenos();
            break;
            }
          case MAISMENOS:{
            maismenos();
            variavel();
            break;
            }
          case MENOSMAIS:{
            menosmais();
            variavel();
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          fechaParenteses();
          bloco();
        } catch (ParseException e) {
consumeUntil(g, e, "para");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("para");
    }
}

  static final public void enquanto() throws ParseException {
    trace_call("enquanto");
    try {
/*@bgen(jjtree) enquanto */
  SimpleNode jjtn000 = new SimpleNode(JJTENQUANTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.enquanto;
      try {
        try {
          whileBloco();
          abreParenteses();
          expressao();
          fechaParenteses();
          bloco();
        } catch (ParseException e) {
consumeUntil(g, e, "enquanto");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("enquanto");
    }
}

  static final public void expressao() throws ParseException {
    trace_call("expressao");
    try {
/*@bgen(jjtree) expressao */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.expressao;
      try {
        try {
          termoExpressao();
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case OPERADOR_LOGICO:{
              ;
              break;
              }
            default:
              jj_la1[19] = jj_gen;
              break label_7;
            }
            operadorLogico();
            termoExpressao();
          }
        } catch (ParseException e) {
consumeUntil(g, e, "expressao");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("expressao");
    }
}

  static final public void termoExpressao() throws ParseException {
    trace_call("termoExpressao");
    try {
/*@bgen(jjtree) termoExpressao */
  SimpleNode jjtn000 = new SimpleNode(JJTTERMOEXPRESSAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.termoExpressao;
      try {
        try {
          fatorExpressao();
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IGUALIGUAL:
            case MAIOR:
            case MAIORIGUAL:
            case MENOR:
            case MENORIGUAL:
            case MENORMAIOR:{
              ;
              break;
              }
            default:
              jj_la1[20] = jj_gen;
              break label_8;
            }
            operadorComparacao();
            fatorExpressao();
          }
        } catch (ParseException e) {
consumeUntil(g, e, "termoExpressao");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("termoExpressao");
    }
}

  static final public void fatorExpressao() throws ParseException {
    trace_call("fatorExpressao");
    try {
/*@bgen(jjtree) fatorExpressao */
  SimpleNode jjtn000 = new SimpleNode(JJTFATOREXPRESSAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.fatorExpressao;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:
          case FALSE:{
            bool();
            break;
            }
          case ABRE_PARENTESES:{
            comparacao();
            break;
            }
          case PONTO:
          case DIGITO:
          case CARACTERE:{
            variavel();
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
consumeUntil(g, e, "fatorExpressao");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("fatorExpressao");
    }
}

  static final public void comparacao() throws ParseException {
    trace_call("comparacao");
    try {
/*@bgen(jjtree) comparacao */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.comparacao;
      try {
        try {
          abreParenteses();
          fatorExpressao();
          operadorComparacao();
          fatorExpressao();
          fechaParenteses();
        } catch (ParseException e) {
consumeUntil(g, e, "comparacao");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("comparacao");
    }
}

  static final public void operadorComparacao() throws ParseException {
    trace_call("operadorComparacao");
    try {
/*@bgen(jjtree) operadorComparacao */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORCOMPARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g= Follow.fatorExpressao;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IGUALIGUAL:{
            igualIgual();
            break;
            }
          case MAIOR:{
            maior();
            break;
            }
          case MAIORIGUAL:{
            maiorIgual();
            break;
            }
          case MENOR:{
            menor();
            break;
            }
          case MENORIGUAL:{
            menorIgual();
            break;
            }
          case MENORMAIOR:{
            menorMaior();
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
consumeUntil(g, e, "fatorExpressao");
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("operadorComparacao");
    }
}

  static final public void abreChave() throws ParseException {
    trace_call("abreChave");
    try {
/*@bgen(jjtree) abreChave */
  SimpleNode jjtn000 = new SimpleNode(JJTABRECHAVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ABRE_CHAVE);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("abreChave");
    }
}

  static final public void fechaChave() throws ParseException {
    trace_call("fechaChave");
    try {
/*@bgen(jjtree) fechaChave */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHACHAVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FECHA_CHAVE);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("fechaChave");
    }
}

  static final public void inteiroTipo() throws ParseException {
    trace_call("inteiroTipo");
    try {
/*@bgen(jjtree) inteiroTipo */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEIROTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(INTEIRO);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("inteiroTipo");
    }
}

  static final public void floatTipo() throws ParseException {
    trace_call("floatTipo");
    try {
/*@bgen(jjtree) floatTipo */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOATTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FLOAT);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("floatTipo");
    }
}

  static final public void stringTipo() throws ParseException {
    trace_call("stringTipo");
    try {
/*@bgen(jjtree) stringTipo */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRINGTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(STRING);
      } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
      }
    } finally {
      trace_return("stringTipo");
    }
}

  static final public void bolleanTipo() throws ParseException {
    trace_call("bolleanTipo");
    try {
/*@bgen(jjtree) bolleanTipo */
  SimpleNode jjtn000 = new SimpleNode(JJTBOLLEANTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(BOLLEAN);
      } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
      }
    } finally {
      trace_return("bolleanTipo");
    }
}

  static final public void caractere() throws ParseException {
    trace_call("caractere");
    try {
/*@bgen(jjtree) caractere */
  SimpleNode jjtn000 = new SimpleNode(JJTCARACTERE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(CARACTERE);
      } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
      }
    } finally {
      trace_return("caractere");
    }
}

  static final public void digito() throws ParseException {
    trace_call("digito");
    try {
/*@bgen(jjtree) digito */
  SimpleNode jjtn000 = new SimpleNode(JJTDIGITO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(DIGITO);
      } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
      }
    } finally {
      trace_return("digito");
    }
}

  static final public void ponto() throws ParseException {
    trace_call("ponto");
    try {
/*@bgen(jjtree) ponto */
  SimpleNode jjtn000 = new SimpleNode(JJTPONTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(PONTO);
      } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
      }
    } finally {
      trace_return("ponto");
    }
}

  static final public void trueBloco() throws ParseException {
    trace_call("trueBloco");
    try {
/*@bgen(jjtree) trueBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTTRUEBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(TRUE);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("trueBloco");
    }
}

  static final public void falseBloco() throws ParseException {
    trace_call("falseBloco");
    try {
/*@bgen(jjtree) falseBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTFALSEBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FALSE);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("falseBloco");
    }
}

  static final public void ifBloco() throws ParseException {
    trace_call("ifBloco");
    try {
/*@bgen(jjtree) ifBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTIFBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(IF);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("ifBloco");
    }
}

  static final public void elseBloco() throws ParseException {
    trace_call("elseBloco");
    try {
/*@bgen(jjtree) elseBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ELSE);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("elseBloco");
    }
}

  static final public void forBloco() throws ParseException {
    trace_call("forBloco");
    try {
/*@bgen(jjtree) forBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTFORBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FOR);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("forBloco");
    }
}

  static final public void pontoVirgula() throws ParseException {
    trace_call("pontoVirgula");
    try {
/*@bgen(jjtree) pontoVirgula */
  SimpleNode jjtn000 = new SimpleNode(JJTPONTOVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(PONTO_VIRGULA);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("pontoVirgula");
    }
}

  static final public void virgula() throws ParseException {
    trace_call("virgula");
    try {
/*@bgen(jjtree) virgula */
  SimpleNode jjtn000 = new SimpleNode(JJTVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(VIRGULA);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("virgula");
    }
}

  static final public void igual() throws ParseException {
    trace_call("igual");
    try {
/*@bgen(jjtree) igual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(IGUAL);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("igual");
    }
}

  static final public void abreParenteses() throws ParseException {
    trace_call("abreParenteses");
    try {
/*@bgen(jjtree) abreParenteses */
  SimpleNode jjtn000 = new SimpleNode(JJTABREPARENTESES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ABRE_PARENTESES);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("abreParenteses");
    }
}

  static final public void igualIgual() throws ParseException {
    trace_call("igualIgual");
    try {
/*@bgen(jjtree) igualIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUALIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(IGUALIGUAL);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("igualIgual");
    }
}

  static final public void maior() throws ParseException {
    trace_call("maior");
    try {
/*@bgen(jjtree) maior */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(MAIOR);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("maior");
    }
}

  static final public void maiorIgual() throws ParseException {
    trace_call("maiorIgual");
    try {
/*@bgen(jjtree) maiorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(MAIORIGUAL);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("maiorIgual");
    }
}

  static final public void menor() throws ParseException {
    trace_call("menor");
    try {
/*@bgen(jjtree) menor */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(MENOR);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("menor");
    }
}

  static final public void menorIgual() throws ParseException {
    trace_call("menorIgual");
    try {
/*@bgen(jjtree) menorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMENORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(MENORIGUAL);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("menorIgual");
    }
}

  static final public void menorMaior() throws ParseException {
    trace_call("menorMaior");
    try {
/*@bgen(jjtree) menorMaior */
  SimpleNode jjtn000 = new SimpleNode(JJTMENORMAIOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(MENORMAIOR);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("menorMaior");
    }
}

  static final public void fechaParenteses() throws ParseException {
    trace_call("fechaParenteses");
    try {
/*@bgen(jjtree) fechaParenteses */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHAPARENTESES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FECHA_PARENTESES);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("fechaParenteses");
    }
}

  static final public void mais() throws ParseException {
    trace_call("mais");
    try {
/*@bgen(jjtree) mais */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(MAIS);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("mais");
    }
}

  static final public void menos() throws ParseException {
    trace_call("menos");
    try {
/*@bgen(jjtree) menos */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(MENOS);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("menos");
    }
}

  static final public void multiplicacao() throws ParseException {
    trace_call("multiplicacao");
    try {
/*@bgen(jjtree) multiplicacao */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(MULTIPLICACAO);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("multiplicacao");
    }
}

  static final public void divisao() throws ParseException {
    trace_call("divisao");
    try {
/*@bgen(jjtree) divisao */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVISAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(DIVISAO);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("divisao");
    }
}

  static final public void potencia() throws ParseException {
    trace_call("potencia");
    try {
/*@bgen(jjtree) potencia */
  SimpleNode jjtn000 = new SimpleNode(JJTPOTENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(POTENCIA);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("potencia");
    }
}

  static final public void whileBloco() throws ParseException {
    trace_call("whileBloco");
    try {
/*@bgen(jjtree) whileBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILEBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(WHILE);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("whileBloco");
    }
}

  static final public void operadorLogico() throws ParseException {
    trace_call("operadorLogico");
    try {
/*@bgen(jjtree) operadorLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(OPERADOR_LOGICO);
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("operadorLogico");
    }
}

  static final public void maismais() throws ParseException {
    trace_call("maismais");
    try {
/*@bgen(jjtree) maismais */
  SimpleNode jjtn000 = new SimpleNode(JJTMAISMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(MAISMAIS);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("maismais");
    }
}

  static final public void menosmenos() throws ParseException {
    trace_call("menosmenos");
    try {
/*@bgen(jjtree) menosmenos */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOSMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(MENOSMENOS);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("menosmenos");
    }
}

  static final public void maismenos() throws ParseException {
    trace_call("maismenos");
    try {
/*@bgen(jjtree) maismenos */
  SimpleNode jjtn000 = new SimpleNode(JJTMAISMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(MAISMENOS);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("maismenos");
    }
}

  static final public void menosmais() throws ParseException {
    trace_call("menosmais");
    try {
/*@bgen(jjtree) menosmais */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOSMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(MENOSMAIS);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("menosmais");
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Aula1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x69e0,0x69e0,0x69e0,0x200000,0x1000,0x6000,0x1e0,0x400000,0x400000,0x1c20600,0x1800000,0x1800000,0xe1800000,0xe1800000,0x420000,0xe1a60000,0xe1a60000,0x600,0x1e000000,0x0,0x0,0x420600,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x180,0x380,0x0,0x0,0x0,0x0,0x180,0x1ff,0x1ff,0x0,0x0,0x1,0x7e,0x180,0x7e,};
	}

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public Aula1(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Aula1(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new Aula1TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Aula1(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new Aula1TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new Aula1TokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Aula1(Aula1TokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Aula1TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[42];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 23; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 42; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  static private int trace_indent = 0;
/** Enable tracing. */
  static final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
	 trace_enabled = false;
  }

  static protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  static protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  static protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  static protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

}
